

Flint is a domain-specific languag (DSL) for formally describing institutional facts and Hohfeldian relations. It supports three kinds of declarations:

- iFacts, declaring types of (atomic) facts that may be true in some world.

- Situational relations: these describe the CLAIM-
DUTY-CLAIMRIGHT, and LIBERTY-NORIGHT relations. These relations are similar to iFacts but have aditional structure: they relate roles and objects.

- Generative relations: these are the generative Hohfeldian relations. Most important this includes the POWER-LIABILITY relation. Generative relations can create or delete facts or situational relations.

All declarations have a unique name, and associated meta data, such as a description of the legal source, a Juriconnect URL, and the relevant natural language text fragment of the law.

The idea is that the iFacts and the situational relations describe possible states of the world. The generative relations can be used to  transition to a new world, where a different set of iFacts holds.  A declaration of a generative relation contains a boolean expression, describing its precondition. Boolean expressions consist of the standard boolean connectives (and, or, not, etc.) and may refer to iFacts and situational relations.
Whenever the precondition is true, the relation is /enabled/.  When such a relation is enabled, it can be /enacted/ (by the appropriate actor) to trigger the execution of the postcondition. A postcondition is a list of iFacts or situational relations that must become true or false in the new world.

Subsection: Formal Analysis & Simulation

Subsection: Specification Support

Flint is accompanied with an integrated develoment environment (IDE), which provides editor services such as automatic syntax checking, syntax highlighting, jump-to-definition (e.g., clicking on an iFact in a precondition or postcondition moves the cursor to its definition), error marking, content completion, and hover documentation. Currently, the IDE displays errors when a references iFact or relation is not defined. In the future, we will extend this with automated cross-referencing with legal texts, more advanced consistency checks (e.g., decidability, reachability etc.), and refactoring operations (e.g., consistently renaming an iFact).

We have automatically imported an initial set of legal relations and iFacts from Excel sheets, which immediately uncovered a number of mistakes due to typos or missing iFact declarations. Automated tooling for engineering such legal specifications is thus extremely useful, even if the analysis itself is very simple. 

Simulation

Flint specifications can be used for simulating cases. This involves defining an (initial) world by listing the iFact and situational relations that hold. Given this initial world, some of the generative relations are enabled, because the preconditions are true. In the simulation, the enabled relations can be fired, to obtian a new state of the world, in which a (possibly different) set of relations is enabled. 

TODO:

- Screenshot: showing error marking
- example
- visualization
